import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import axios from "axios";
import { useQuery, useMutation } from "react-query";
import { CurrentPlayerCard } from "../components/CurrentPlayerCard";
import type { Player } from "../types";

/**
 * 1. get current round id on load
 * 2. poll to find out how many other people have bid
 * 2. allow user to enter a bid
 * 3. submit bid passing bid amount and current round id and user id
 * 4. when poll returns all bids are in show all bids.
 */

const Home: NextPage = () => {
  const { isLoading, data: currentRound } = useQuery<Round>({
    queryKey: "round",
    queryFn: () => fetch(`/api/round`).then((res) => res.json()),
    onError: (err) => console.log(err),
  });

  const getRound = () => {
    if (isLoading) return <p>Loading...</p>;
    if (!currentRound) return <p>No currentRound</p>;
    return console.log("currentRound", currentRound);
  };
  return (
    <>
      <Head>
        <title>Sealed with a Kiss</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen min-w-max bg-gray-900 p-8 text-white backdrop-blur-0">
        <>
          {getRound()}
          {currentRound && (
            <>
              <BidPage roundId={currentRound.id} />

              <RoundBids roundId={currentRound.id} />
            </>
          )}
        </>
      </main>
    </>
  );
};

function BidPage({ roundId }: { roundId: string }) {
  const { isLoading: isCurrentPlayerLoading, data: currentPlayer } =
    useQuery<Player>({
      queryKey: "currentPlayer",
      queryFn: () => axios.get(`/api/currentPlayer`),
      onError: (err) => console.log(err),
    });

  const mutation = useMutation({
    mutationFn: (newBid: { amount: string; user: string; roundId: string }) => {
      return axios.post(`/api/bid`, newBid);
    },
  });

  function handleOnSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    console.log(
      "caaling mutation",
      e.currentTarget.amount,
      e.currentTarget.user,
      roundId
    );
    mutation.mutate({
      amount: (e.currentTarget.amount as HTMLInputElement).value,
      user: (e.currentTarget.user as HTMLInputElement).value,
      roundId,
    });
  }

  if (isCurrentPlayerLoading) return <p>Loading...</p>;

  return (
    <div className="flex max-w-lg flex-col">
      <div className="flex justify-center">
        <CurrentPlayerCard player={currentPlayer.data} />
      </div>

      <form
        onSubmit={handleOnSubmit}
        className="mt-8 flex max-w-md flex-col justify-center gap-1 text-white"
      >
        <label>
          <input
            className="w-full bg-slate-800 p-2 placeholder-gray-400"
            name="user"
            placeholder="Your Name"
            required
          />
        </label>
        <label>
          <input
            className="w-full bg-slate-800 p-2 placeholder-gray-400"
            name="amount"
            placeholder="Enter a bid"
            required
            type="number"
          />
        </label>
        <button
          className="mt-2 rounded bg-slate-800 p-2 text-white"
          type="submit"
        >
          Submit Bid
        </button>
      </form>
    </div>
  );
}

type Bid = {
  id: string;
  amount: number;
  user: string;
  roundId: string;
};

function RoundBids({ roundId }: { roundId: string }) {
  const { isLoading, data } = useQuery<Bid[]>({
    queryKey: "roundBids",
    queryFn: () =>
      fetch(`/api/bid?roundId=${roundId}`).then((res) => res.json()),
    onError: (err) => console.log(err),
    refetchInterval: 1000,
  });
  if (isLoading) return <p>Loading...</p>;

  const getTickIcon = (bid: Bid) => {
    if (typeof bid.amount === "undefined") {
      return (
        <svg
          className="mr-1.5 h-4 w-4 flex-shrink-0 text-green-500 dark:text-green-400"
          fill="currentColor"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
            clip-rule="evenodd"
          ></path>
        </svg>
      );
    }

    return null;
  };

  return (
    <div className="mt-8 flex flex-col content-center justify-center">
      <h3 className="text-xl">Bids for Round</h3>
      <ul>
        {data?.map((bid) => (
          <li key={bid.id} className="flex items-center">
            {getTickIcon(bid)}
            {bid.user} {bid.amount}
          </li>
        ))}
      </ul>
    </div>
  );
}

type Round = {
  id: string;
  number: number;
};
function Round({ setRoundId }: { setRoundId: (id: string) => void }) {
  const mutation = useMutation({
    mutationFn: () => {
      return axios.post(`/api/round`, { id: new Date(), isCurrent: true });
    },
  });

  const { isLoading, data } = useQuery<Round[]>({
    queryKey: "round",
    queryFn: () => fetch(`/api/round`).then((res) => res.json()),
    onError: (err) => console.log(err),
    onSuccess(data: Round[]) {
      if (data && data.length > 0) {
        const currentRound = data[0] as Round;
        setRoundId(currentRound.id);
      }
    },
  });

  const getRound = () => {
    if (isLoading) return <p>Loading...</p>;
    if (!data || data.length === 0) return <p>No currentRound</p>;
    const currentRound = data[0] as Round;
    return <p> currentRound: {currentRound.number}</p>;
  };

  return (
    <div>
      {getRound()}
      <button
        className="rounded bg-slate-800 p-2 text-white"
        onClick={() => mutation.mutate()}
      >
        New Round
      </button>
    </div>
  );
}

export default Home;
