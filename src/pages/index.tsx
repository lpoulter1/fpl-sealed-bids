import { useState } from "react";
import { type NextPage } from "next";
import Image from "next/image";
import Head from "next/head";
import axios from "axios";
import { useQuery, useMutation } from "react-query";

/**
 * 1. get current round id on load
 * 2. poll to find out how many other people have bid
 * 2. allow user to enter a bid
 * 3. submit bid passing bid amount and current round id and user id
 * 4. when poll returns all bids are in show all bids.
 */

const Home: NextPage = () => {
  const { isLoading, data: currentRound } = useQuery<Round>({
    queryKey: "round",
    queryFn: () => fetch(`/api/round`).then((res) => res.json()),
    onError: (err) => console.log(err),
  });

  const getRound = () => {
    if (isLoading) return <p>Loading...</p>;
    if (!currentRound) return <p>No currentRound</p>;
    return <p> currentRound: {currentRound.number}</p>;
  };
  return (
    <>
      <Head>
        <title>Sealed with a Kiss</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {getRound()}
        {currentRound && (
          <>
            <BidPage roundId={currentRound.id} />

            <RoundBids roundId={currentRound.id} />
          </>
        )}
      </main>
    </>
  );
};

function BidPage({ roundId }: { roundId: string }) {
  const mutation = useMutation({
    mutationFn: (newBid: { amount: string; user: string; roundId: string }) => {
      return axios.post(`/api/bid`, newBid);
    },
  });

  function handleOnSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    console.log(
      "caaling mutation",
      e.currentTarget.amount,
      e.currentTarget.user,
      roundId
    );
    mutation.mutate({
      amount: (e.currentTarget.amount as HTMLInputElement).value,
      user: (e.currentTarget.user as HTMLInputElement).value,
      roundId,
    });
  }

  return (
    <div className="App">
      <Player />
      <form onSubmit={handleOnSubmit} className="flex gap-1 text-white">
        <label>
          <input
            className="bg-slate-800 p-2 placeholder-gray-400"
            name="user"
            placeholder="Your Name"
          />
        </label>
        <label>
          <input
            className="bg-slate-800 p-2 placeholder-gray-400"
            name="amount"
            placeholder="Enter a bid"
          />
        </label>
        <button className="rounded bg-slate-800 p-2 text-white" type="submit">
          Submit Bid
        </button>
      </form>
    </div>
  );
}

type Player = {
  id: string;
  web_name: string;
  code: number;
};

function Player() {
  const { isLoading, data: players } = useQuery<Player[]>({
    queryKey: "players",
    queryFn: () => fetch(`/api/players`).then((res) => res.json()),
    onError: (err) => console.log(err),
    staleTime: Infinity,
  });

  if (isLoading) return <p>Loading...</p>;
  if (!players) return <p>No player</p>;
  if (players.length === 0) return <p>No player</p>;
  console.log("players", players);
  const randomPlayer = players[Math.floor(Math.random() * players.length)] as Player;
  return (
    <div>
      Bidding on Player Name: {randomPlayer.web_name}
      <img
        src={`https://resources.premierleague.com/premierleague/photos/players/110x140/p${randomPlayer.code}.png`}
        alt="a nice face"
        width={100}
        height={100}
      />
    </div>
  );
}

type Bid = {
  id: string;
  amount: number;
  user: string;
  roundId: string;
};

function RoundBids({ roundId }: { roundId: string }) {
  console.log("RoundBids: roundId", roundId);
  const { isLoading, data } = useQuery<Bid[]>({
    queryKey: "roundBids",
    queryFn: () =>
      fetch(`/api/bid?roundId=${roundId}`).then((res) => res.json()),
    onError: (err) => console.log(err),
    refetchInterval: 1000,
  });
  if (isLoading) return <p>Loading...</p>;
  console.log(data);
  return (
    <div>
      <h3>Bids for Round {roundId}</h3>
      <ul>
        {data?.map((bid) => (
          <li key={bid.id}>
            {bid.user} bid {bid.amount}
          </li>
        ))}
      </ul>
    </div>
  );
}

type Round = {
  id: string;
  number: number;
};
function Round({ setRoundId }: { setRoundId: (id: string) => void }) {
  const mutation = useMutation({
    mutationFn: () => {
      return axios.post(`/api/round`, { id: new Date(), isCurrent: true });
    },
  });

  const { isLoading, data } = useQuery<Round[]>({
    queryKey: "round",
    queryFn: () => fetch(`/api/round`).then((res) => res.json()),
    onError: (err) => console.log(err),
    onSuccess(data: Round[]) {
      if (data && data.length > 0) {
        const currentRound = data[0] as Round;
        setRoundId(currentRound.id);
      }
    },
  });

  const getRound = () => {
    if (isLoading) return <p>Loading...</p>;
    if (!data || data.length === 0) return <p>No currentRound</p>;
    const currentRound = data[0] as Round;
    return <p> currentRound: {currentRound.number}</p>;
  };

  return (
    <div>
      {getRound()}
      <button
        className="rounded bg-slate-800 p-2 text-white"
        onClick={() => mutation.mutate()}
      >
        New Round
      </button>
    </div>
  );
}

export default Home;
